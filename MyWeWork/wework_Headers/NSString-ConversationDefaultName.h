//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSString.h>

@interface NSString (ConversationDefaultName)
+ (id)cPlusStringToNSString:(const basic_string_a490aa4c *)arg1;
+     // Error parsing type: @32@0:8r^{CorpBriefInfo=^^?{UnknownFieldSet=^{vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> >}}[2I]QQ^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}II^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}iI^{StaffInfo}^{AppliInfo}QII^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}iBBBB^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{UserBriefInfo}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{RepeatedPtrField<std::__1::basic_string<char> >=^^viii}II^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{RepeatedPtrField<std::__1::basic_string<char> >=^^viii}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{ModNameInfo}iI^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}Q^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}BBBBI^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{ApplyOption}IBBi}16r^{User=^^?{AtomicRefCount={atomic<int>=Ai}}{WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{ObserverList<model::UserObserver, false>={WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{vector<model::UserObserver *, std::__1::allocator<model::UserObserver *> >=^^{UserObserver}^^{UserObserver}{__compressed_pair<model::UserObserver **, std::__1::allocator<model::UserObserver *> >=^^{UserObserver}}}ii}{ObserverList<model::UserObserver, false>={WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{vector<model::UserObserver *, std::__1::allocator<model::UserObserver *> >=^^{UserObserver}^^{UserObserver}{__compressed_pair<model::UserObserver **, std::__1::allocator<model::UserObserver *> >=^^{UserObserver}}}ii}{unique_ptr<pb::User, std::__1::default_delete<pb::User> >={__compressed_pair<pb::User *, std::__1::default_delete<pb::User> >=^{User}}}{scoped_refptr<model::Company>=^{Company}}}24, name: corpCheckInfoWithCorpInfo:andUser:
+ (id)pstnSysContactDisplayCorpNameWithCorpInfo:(const struct CorpBriefInfo *)arg1;
+ (id)displayNameWithUserId:(unsigned long long)arg1;
+ (id)displayShortCorpNameWithCorpInfo:(const struct CorpBriefInfo *)arg1 otherRID:(unsigned long long)arg2 needRealName:(_Bool)arg3 isInCircle:(_Bool)arg4;
+ (id)displayShortCorpNameWithCorpInfo:(const struct CorpBriefInfo *)arg1 otherRID:(unsigned long long)arg2 needRealName:(_Bool)arg3;
+ (id)displayShortCorpNameWithCorpInfo:(const struct CorpBriefInfo *)arg1 otherRID:(unsigned long long)arg2 isInCircle:(_Bool)arg3;
+ (id)displayShortCorpNameWithCorpInfo:(const struct CorpBriefInfo *)arg1 otherRID:(unsigned long long)arg2;
+ (id)displayShortCorpNameWithCorpInfo:(const struct CorpBriefInfo *)arg1;
+ (id)displayCorpNameWithCorpInfo:(const struct CorpBriefInfo *)arg1 otherRID:(unsigned long long)arg2 needRealName:(_Bool)arg3 isInCircle:(_Bool)arg4;
+ (id)displayCorpNameWithCorpInfo:(const struct CorpBriefInfo *)arg1 otherRID:(unsigned long long)arg2;
+ (id)displayCorpNameWithCorpInfo:(const struct CorpBriefInfo *)arg1;
+     // Error parsing type: @24@0:8r^{User=^^?{AtomicRefCount={atomic<int>=Ai}}{WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{ObserverList<model::UserObserver, false>={WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{vector<model::UserObserver *, std::__1::allocator<model::UserObserver *> >=^^{UserObserver}^^{UserObserver}{__compressed_pair<model::UserObserver **, std::__1::allocator<model::UserObserver *> >=^^{UserObserver}}}ii}{ObserverList<model::UserObserver, false>={WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{vector<model::UserObserver *, std::__1::allocator<model::UserObserver *> >=^^{UserObserver}^^{UserObserver}{__compressed_pair<model::UserObserver **, std::__1::allocator<model::UserObserver *> >=^^{UserObserver}}}ii}{unique_ptr<pb::User, std::__1::default_delete<pb::User> >={__compressed_pair<pb::User *, std::__1::default_delete<pb::User> >=^{User}}}{scoped_refptr<model::Company>=^{Company}}}16, name: displayNameWithUser:
+     // Error parsing type: @24@0:8r^{User=^^?{AtomicRefCount={atomic<int>=Ai}}{WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{ObserverList<model::UserObserver, false>={WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{vector<model::UserObserver *, std::__1::allocator<model::UserObserver *> >=^^{UserObserver}^^{UserObserver}{__compressed_pair<model::UserObserver **, std::__1::allocator<model::UserObserver *> >=^^{UserObserver}}}ii}{ObserverList<model::UserObserver, false>={WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{vector<model::UserObserver *, std::__1::allocator<model::UserObserver *> >=^^{UserObserver}^^{UserObserver}{__compressed_pair<model::UserObserver **, std::__1::allocator<model::UserObserver *> >=^^{UserObserver}}}ii}{unique_ptr<pb::User, std::__1::default_delete<pb::User> >={__compressed_pair<pb::User *, std::__1::default_delete<pb::User> >=^{User}}}{scoped_refptr<model::Company>=^{Company}}}16, name: completeNameWithUser:
+ (id)nameWithAccountString:(id)arg1;
+ (id)domainWithAccountString:(id)arg1;
+     // Error parsing type: @24@0:8r^{User=^^?{AtomicRefCount={atomic<int>=Ai}}{WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{ObserverList<model::UserObserver, false>={WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{vector<model::UserObserver *, std::__1::allocator<model::UserObserver *> >=^^{UserObserver}^^{UserObserver}{__compressed_pair<model::UserObserver **, std::__1::allocator<model::UserObserver *> >=^^{UserObserver}}}ii}{ObserverList<model::UserObserver, false>={WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{vector<model::UserObserver *, std::__1::allocator<model::UserObserver *> >=^^{UserObserver}^^{UserObserver}{__compressed_pair<model::UserObserver **, std::__1::allocator<model::UserObserver *> >=^^{UserObserver}}}ii}{unique_ptr<pb::User, std::__1::default_delete<pb::User> >={__compressed_pair<pb::User *, std::__1::default_delete<pb::User> >=^{User}}}{scoped_refptr<model::Company>=^{Company}}}16, name: realNameWithUser:
+     // Error parsing type: @24@0:8r^{User=^^?{AtomicRefCount={atomic<int>=Ai}}{WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{ObserverList<model::UserObserver, false>={WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{vector<model::UserObserver *, std::__1::allocator<model::UserObserver *> >=^^{UserObserver}^^{UserObserver}{__compressed_pair<model::UserObserver **, std::__1::allocator<model::UserObserver *> >=^^{UserObserver}}}ii}{ObserverList<model::UserObserver, false>={WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{vector<model::UserObserver *, std::__1::allocator<model::UserObserver *> >=^^{UserObserver}^^{UserObserver}{__compressed_pair<model::UserObserver **, std::__1::allocator<model::UserObserver *> >=^^{UserObserver}}}ii}{unique_ptr<pb::User, std::__1::default_delete<pb::User> >={__compressed_pair<pb::User *, std::__1::default_delete<pb::User> >=^{User}}}{scoped_refptr<model::Company>=^{Company}}}16, name: waterMakingName:
+     // Error parsing type: @24@0:8r^{User=^^?{AtomicRefCount={atomic<int>=Ai}}{WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{ObserverList<model::UserObserver, false>={WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{vector<model::UserObserver *, std::__1::allocator<model::UserObserver *> >=^^{UserObserver}^^{UserObserver}{__compressed_pair<model::UserObserver **, std::__1::allocator<model::UserObserver *> >=^^{UserObserver}}}ii}{ObserverList<model::UserObserver, false>={WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{vector<model::UserObserver *, std::__1::allocator<model::UserObserver *> >=^^{UserObserver}^^{UserObserver}{__compressed_pair<model::UserObserver **, std::__1::allocator<model::UserObserver *> >=^^{UserObserver}}}ii}{unique_ptr<pb::User, std::__1::default_delete<pb::User> >={__compressed_pair<pb::User *, std::__1::default_delete<pb::User> >=^{User}}}{scoped_refptr<model::Company>=^{Company}}}16, name: chineseNameWithUser:
+     // Error parsing type: @24@0:8r^{User=^^?{AtomicRefCount={atomic<int>=Ai}}{WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{ObserverList<model::UserObserver, false>={WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{vector<model::UserObserver *, std::__1::allocator<model::UserObserver *> >=^^{UserObserver}^^{UserObserver}{__compressed_pair<model::UserObserver **, std::__1::allocator<model::UserObserver *> >=^^{UserObserver}}}ii}{ObserverList<model::UserObserver, false>={WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{vector<model::UserObserver *, std::__1::allocator<model::UserObserver *> >=^^{UserObserver}^^{UserObserver}{__compressed_pair<model::UserObserver **, std::__1::allocator<model::UserObserver *> >=^^{UserObserver}}}ii}{unique_ptr<pb::User, std::__1::default_delete<pb::User> >={__compressed_pair<pb::User *, std::__1::default_delete<pb::User> >=^{User}}}{scoped_refptr<model::Company>=^{Company}}}16, name: englishNameWithUser:
+ (id)defaultTitleWithUserList:(vector_89e6321f)arg1;
+     // Error parsing type: @24@0:8r^{Conversation=^^?{AtomicRefCount={atomic<int>=Ai}}{WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{ObserverList<model::ConversationObserver, false>={WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{vector<model::ConversationObserver *, std::__1::allocator<model::ConversationObserver *> >=^^{ConversationObserver}^^{ConversationObserver}{__compressed_pair<model::ConversationObserver **, std::__1::allocator<model::ConversationObserver *> >=^^{ConversationObserver}}}ii}{unique_ptr<pb::Conversation, std::__1::default_delete<pb::Conversation> >={__compressed_pair<pb::Conversation *, std::__1::default_delete<pb::Conversation> >=^{Conversation}}}{vector<scoped_refptr<model::ConversationMember>, std::__1::allocator<scoped_refptr<model::ConversationMember> > >=^{scoped_refptr<model::ConversationMember>}^{scoped_refptr<model::ConversationMember>}{__compressed_pair<scoped_refptr<model::ConversationMember> *, std::__1::allocator<scoped_refptr<model::ConversationMember> > >=^{scoped_refptr<model::ConversationMember>}}}BBBBBBB{unique_ptr<std::__1::set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> >, std::__1::default_delete<std::__1::set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> > > >={__compressed_pair<std::__1::set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> > *, std::__1::default_delete<std::__1::set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> > > >=^{set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> >}}}{set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> >={__tree<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long long, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<unsigned long long> >=Q}}}}16, name: defaultTitleWithConversation:
+     // Error parsing type: @36@0:8r^{Conversation=^^?{AtomicRefCount={atomic<int>=Ai}}{WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{ObserverList<model::ConversationObserver, false>={WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{vector<model::ConversationObserver *, std::__1::allocator<model::ConversationObserver *> >=^^{ConversationObserver}^^{ConversationObserver}{__compressed_pair<model::ConversationObserver **, std::__1::allocator<model::ConversationObserver *> >=^^{ConversationObserver}}}ii}{unique_ptr<pb::Conversation, std::__1::default_delete<pb::Conversation> >={__compressed_pair<pb::Conversation *, std::__1::default_delete<pb::Conversation> >=^{Conversation}}}{vector<scoped_refptr<model::ConversationMember>, std::__1::allocator<scoped_refptr<model::ConversationMember> > >=^{scoped_refptr<model::ConversationMember>}^{scoped_refptr<model::ConversationMember>}{__compressed_pair<scoped_refptr<model::ConversationMember> *, std::__1::allocator<scoped_refptr<model::ConversationMember> > >=^{scoped_refptr<model::ConversationMember>}}}BBBBBBB{unique_ptr<std::__1::set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> >, std::__1::default_delete<std::__1::set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> > > >={__compressed_pair<std::__1::set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> > *, std::__1::default_delete<std::__1::set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> > > >=^{set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> >}}}{set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> >={__tree<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long long, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<unsigned long long> >=Q}}}}16Q24I32, name: defaultTitleWithConversation:withCreatorId:sliceMaxMembersCount:
+     // Error parsing type: @32@0:8r^{Conversation=^^?{AtomicRefCount={atomic<int>=Ai}}{WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{ObserverList<model::ConversationObserver, false>={WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{vector<model::ConversationObserver *, std::__1::allocator<model::ConversationObserver *> >=^^{ConversationObserver}^^{ConversationObserver}{__compressed_pair<model::ConversationObserver **, std::__1::allocator<model::ConversationObserver *> >=^^{ConversationObserver}}}ii}{unique_ptr<pb::Conversation, std::__1::default_delete<pb::Conversation> >={__compressed_pair<pb::Conversation *, std::__1::default_delete<pb::Conversation> >=^{Conversation}}}{vector<scoped_refptr<model::ConversationMember>, std::__1::allocator<scoped_refptr<model::ConversationMember> > >=^{scoped_refptr<model::ConversationMember>}^{scoped_refptr<model::ConversationMember>}{__compressed_pair<scoped_refptr<model::ConversationMember> *, std::__1::allocator<scoped_refptr<model::ConversationMember> > >=^{scoped_refptr<model::ConversationMember>}}}BBBBBBB{unique_ptr<std::__1::set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> >, std::__1::default_delete<std::__1::set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> > > >={__compressed_pair<std::__1::set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> > *, std::__1::default_delete<std::__1::set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> > > >=^{set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> >}}}{set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> >={__tree<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long long, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<unsigned long long> >=Q}}}}16Q24, name: defaultTitleWithConversation:withCreatorId:
@end

